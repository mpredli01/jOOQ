/*
 * This file is generated by jOOQ.
*/
package org.redlich.pubs.model.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;
import org.redlich.pubs.model.Keys;
import org.redlich.pubs.model.Pubs;
import org.redlich.pubs.model.tables.records.PublicationsRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Publications extends TableImpl<PublicationsRecord> {

    private static final long serialVersionUID = -226823885;

    /**
     * The reference instance of <code>pubs.publications</code>
     */
    public static final Publications PUBLICATIONS = new Publications();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PublicationsRecord> getRecordType() {
        return PublicationsRecord.class;
    }

    /**
     * The column <code>pubs.publications.id</code>.
     */
    public final TableField<PublicationsRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>pubs.publications.version</code>.
     */
    public final TableField<PublicationsRecord, Long> VERSION = createField("version", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>pubs.publications.type_id</code>.
     */
    public final TableField<PublicationsRecord, Long> TYPE_ID = createField("type_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>pubs.publications.title</code>.
     */
    public final TableField<PublicationsRecord, String> TITLE = createField("title", org.jooq.impl.SQLDataType.VARCHAR.length(200).nullable(false), this, "");

    /**
     * The column <code>pubs.publications.author_id</code>.
     */
    public final TableField<PublicationsRecord, Long> AUTHOR_ID = createField("author_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>pubs.publications.publisher_id</code>.
     */
    public final TableField<PublicationsRecord, Long> PUBLISHER_ID = createField("publisher_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>pubs.publications.publish_date</code>.
     */
    public final TableField<PublicationsRecord, Timestamp> PUBLISH_DATE = createField("publish_date", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>pubs.publications.url</code>.
     */
    public final TableField<PublicationsRecord, String> URL = createField("url", org.jooq.impl.SQLDataType.VARCHAR.length(100), this, "");

    /**
     * Create a <code>pubs.publications</code> table reference
     */
    public Publications() {
        this("publications", null);
    }

    /**
     * Create an aliased <code>pubs.publications</code> table reference
     */
    public Publications(String alias) {
        this(alias, PUBLICATIONS);
    }

    private Publications(String alias, Table<PublicationsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Publications(String alias, Table<PublicationsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Pubs.PUBS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<PublicationsRecord, Long> getIdentity() {
        return Keys.IDENTITY_PUBLICATIONS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<PublicationsRecord> getPrimaryKey() {
        return Keys.KEY_PUBLICATIONS_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<PublicationsRecord>> getKeys() {
        return Arrays.<UniqueKey<PublicationsRecord>>asList(Keys.KEY_PUBLICATIONS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<PublicationsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<PublicationsRecord, ?>>asList(Keys.FK37B8A3C7D1FF4899, Keys.FK37B8A3C794A38877, Keys.FK37B8A3C77A7F3855);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Publications as(String alias) {
        return new Publications(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Publications rename(String name) {
        return new Publications(name, null);
    }
}
