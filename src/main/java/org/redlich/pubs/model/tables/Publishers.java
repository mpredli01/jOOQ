/*
 * This file is generated by jOOQ.
*/
package org.redlich.pubs.model.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;
import org.redlich.pubs.model.Keys;
import org.redlich.pubs.model.Pubs;
import org.redlich.pubs.model.tables.records.PublishersRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Publishers extends TableImpl<PublishersRecord> {

    private static final long serialVersionUID = -2050348164;

    /**
     * The reference instance of <code>pubs.publishers</code>
     */
    public static final Publishers PUBLISHERS = new Publishers();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PublishersRecord> getRecordType() {
        return PublishersRecord.class;
    }

    /**
     * The column <code>pubs.publishers.id</code>.
     */
    public final TableField<PublishersRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>pubs.publishers.version</code>.
     */
    public final TableField<PublishersRecord, Long> VERSION = createField("version", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>pubs.publishers.publisher</code>.
     */
    public final TableField<PublishersRecord, String> PUBLISHER = createField("publisher", org.jooq.impl.SQLDataType.VARCHAR.length(50).nullable(false), this, "");

    /**
     * Create a <code>pubs.publishers</code> table reference
     */
    public Publishers() {
        this("publishers", null);
    }

    /**
     * Create an aliased <code>pubs.publishers</code> table reference
     */
    public Publishers(String alias) {
        this(alias, PUBLISHERS);
    }

    private Publishers(String alias, Table<PublishersRecord> aliased) {
        this(alias, aliased, null);
    }

    private Publishers(String alias, Table<PublishersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Pubs.PUBS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<PublishersRecord, Long> getIdentity() {
        return Keys.IDENTITY_PUBLISHERS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<PublishersRecord> getPrimaryKey() {
        return Keys.KEY_PUBLISHERS_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<PublishersRecord>> getKeys() {
        return Arrays.<UniqueKey<PublishersRecord>>asList(Keys.KEY_PUBLISHERS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Publishers as(String alias) {
        return new Publishers(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Publishers rename(String name) {
        return new Publishers(name, null);
    }
}
