/*
 * This file is generated by jOOQ.
*/
package org.redlich.pubs.model;


import javax.annotation.Generated;

import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.UniqueKey;
import org.jooq.impl.AbstractKeys;
import org.redlich.pubs.model.tables.Authors;
import org.redlich.pubs.model.tables.Publications;
import org.redlich.pubs.model.tables.Publishers;
import org.redlich.pubs.model.tables.States;
import org.redlich.pubs.model.tables.Types;
import org.redlich.pubs.model.tables.records.AuthorsRecord;
import org.redlich.pubs.model.tables.records.PublicationsRecord;
import org.redlich.pubs.model.tables.records.PublishersRecord;
import org.redlich.pubs.model.tables.records.StatesRecord;
import org.redlich.pubs.model.tables.records.TypesRecord;


/**
 * A class modelling foreign key relationships between tables of the <code>pubs</code> 
 * schema
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // IDENTITY definitions
    // -------------------------------------------------------------------------

    public static final Identity<AuthorsRecord, Long> IDENTITY_AUTHORS = Identities0.IDENTITY_AUTHORS;
    public static final Identity<PublicationsRecord, Long> IDENTITY_PUBLICATIONS = Identities0.IDENTITY_PUBLICATIONS;
    public static final Identity<PublishersRecord, Long> IDENTITY_PUBLISHERS = Identities0.IDENTITY_PUBLISHERS;
    public static final Identity<StatesRecord, Long> IDENTITY_STATES = Identities0.IDENTITY_STATES;
    public static final Identity<TypesRecord, Long> IDENTITY_TYPES = Identities0.IDENTITY_TYPES;

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<AuthorsRecord> KEY_AUTHORS_PRIMARY = UniqueKeys0.KEY_AUTHORS_PRIMARY;
    public static final UniqueKey<PublicationsRecord> KEY_PUBLICATIONS_PRIMARY = UniqueKeys0.KEY_PUBLICATIONS_PRIMARY;
    public static final UniqueKey<PublishersRecord> KEY_PUBLISHERS_PRIMARY = UniqueKeys0.KEY_PUBLISHERS_PRIMARY;
    public static final UniqueKey<StatesRecord> KEY_STATES_PRIMARY = UniqueKeys0.KEY_STATES_PRIMARY;
    public static final UniqueKey<TypesRecord> KEY_TYPES_PRIMARY = UniqueKeys0.KEY_TYPES_PRIMARY;

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<AuthorsRecord, StatesRecord> FKD9771048E2C4D1AB = ForeignKeys0.FKD9771048E2C4D1AB;
    public static final ForeignKey<PublicationsRecord, TypesRecord> FK37B8A3C7D1FF4899 = ForeignKeys0.FK37B8A3C7D1FF4899;
    public static final ForeignKey<PublicationsRecord, AuthorsRecord> FK37B8A3C794A38877 = ForeignKeys0.FK37B8A3C794A38877;
    public static final ForeignKey<PublicationsRecord, PublishersRecord> FK37B8A3C77A7F3855 = ForeignKeys0.FK37B8A3C77A7F3855;

    // -------------------------------------------------------------------------
    // [#1459] distribute members to avoid static initialisers > 64kb
    // -------------------------------------------------------------------------

    private static class Identities0 extends AbstractKeys {
        public static Identity<AuthorsRecord, Long> IDENTITY_AUTHORS = createIdentity(Authors.AUTHORS, Authors.AUTHORS.ID);
        public static Identity<PublicationsRecord, Long> IDENTITY_PUBLICATIONS = createIdentity(Publications.PUBLICATIONS, Publications.PUBLICATIONS.ID);
        public static Identity<PublishersRecord, Long> IDENTITY_PUBLISHERS = createIdentity(Publishers.PUBLISHERS, Publishers.PUBLISHERS.ID);
        public static Identity<StatesRecord, Long> IDENTITY_STATES = createIdentity(States.STATES, States.STATES.ID);
        public static Identity<TypesRecord, Long> IDENTITY_TYPES = createIdentity(Types.TYPES, Types.TYPES.ID);
    }

    private static class UniqueKeys0 extends AbstractKeys {
        public static final UniqueKey<AuthorsRecord> KEY_AUTHORS_PRIMARY = createUniqueKey(Authors.AUTHORS, "KEY_authors_PRIMARY", Authors.AUTHORS.ID);
        public static final UniqueKey<PublicationsRecord> KEY_PUBLICATIONS_PRIMARY = createUniqueKey(Publications.PUBLICATIONS, "KEY_publications_PRIMARY", Publications.PUBLICATIONS.ID);
        public static final UniqueKey<PublishersRecord> KEY_PUBLISHERS_PRIMARY = createUniqueKey(Publishers.PUBLISHERS, "KEY_publishers_PRIMARY", Publishers.PUBLISHERS.ID);
        public static final UniqueKey<StatesRecord> KEY_STATES_PRIMARY = createUniqueKey(States.STATES, "KEY_states_PRIMARY", States.STATES.ID);
        public static final UniqueKey<TypesRecord> KEY_TYPES_PRIMARY = createUniqueKey(Types.TYPES, "KEY_types_PRIMARY", Types.TYPES.ID);
    }

    private static class ForeignKeys0 extends AbstractKeys {
        public static final ForeignKey<AuthorsRecord, StatesRecord> FKD9771048E2C4D1AB = createForeignKey(org.redlich.pubs.model.Keys.KEY_STATES_PRIMARY, Authors.AUTHORS, "FKD9771048E2C4D1AB", Authors.AUTHORS.STATE_ID);
        public static final ForeignKey<PublicationsRecord, TypesRecord> FK37B8A3C7D1FF4899 = createForeignKey(org.redlich.pubs.model.Keys.KEY_TYPES_PRIMARY, Publications.PUBLICATIONS, "FK37B8A3C7D1FF4899", Publications.PUBLICATIONS.TYPE_ID);
        public static final ForeignKey<PublicationsRecord, AuthorsRecord> FK37B8A3C794A38877 = createForeignKey(org.redlich.pubs.model.Keys.KEY_AUTHORS_PRIMARY, Publications.PUBLICATIONS, "FK37B8A3C794A38877", Publications.PUBLICATIONS.AUTHOR_ID);
        public static final ForeignKey<PublicationsRecord, PublishersRecord> FK37B8A3C77A7F3855 = createForeignKey(org.redlich.pubs.model.Keys.KEY_PUBLISHERS_PRIMARY, Publications.PUBLICATIONS, "FK37B8A3C77A7F3855", Publications.PUBLICATIONS.PUBLISHER_ID);
    }
}
